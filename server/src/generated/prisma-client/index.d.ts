// Code generated by Prisma (prisma@1.30.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  toDo: (where?: ToDoWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  toDo: (where: ToDoWhereUniqueInput) => ToDoPromise;
  toDoes: (
    args?: {
      where?: ToDoWhereInput;
      orderBy?: ToDoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ToDo>;
  toDoesConnection: (
    args?: {
      where?: ToDoWhereInput;
      orderBy?: ToDoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ToDoConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createToDo: (data: ToDoCreateInput) => ToDoPromise;
  updateToDo: (
    args: { data: ToDoUpdateInput; where: ToDoWhereUniqueInput }
  ) => ToDoPromise;
  updateManyToDoes: (
    args: { data: ToDoUpdateManyMutationInput; where?: ToDoWhereInput }
  ) => BatchPayloadPromise;
  upsertToDo: (
    args: {
      where: ToDoWhereUniqueInput;
      create: ToDoCreateInput;
      update: ToDoUpdateInput;
    }
  ) => ToDoPromise;
  deleteToDo: (where: ToDoWhereUniqueInput) => ToDoPromise;
  deleteManyToDoes: (where?: ToDoWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  toDo: (
    where?: ToDoSubscriptionWhereInput
  ) => ToDoSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ToDoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "isDone_ASC"
  | "isDone_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "auth0id_ASC"
  | "auth0id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ToDoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ToDoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  isDone?: Boolean;
  isDone_not?: Boolean;
  user?: UserWhereInput;
  sharedWith_every?: UserWhereInput;
  sharedWith_some?: UserWhereInput;
  sharedWith_none?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ToDoWhereInput[] | ToDoWhereInput;
  OR?: ToDoWhereInput[] | ToDoWhereInput;
  NOT?: ToDoWhereInput[] | ToDoWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  auth0id?: String;
  auth0id_not?: String;
  auth0id_in?: String[] | String;
  auth0id_not_in?: String[] | String;
  auth0id_lt?: String;
  auth0id_lte?: String;
  auth0id_gt?: String;
  auth0id_gte?: String;
  auth0id_contains?: String;
  auth0id_not_contains?: String;
  auth0id_starts_with?: String;
  auth0id_not_starts_with?: String;
  auth0id_ends_with?: String;
  auth0id_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  todoes_every?: ToDoWhereInput;
  todoes_some?: ToDoWhereInput;
  todoes_none?: ToDoWhereInput;
  sharedWith_every?: ToDoWhereInput;
  sharedWith_some?: ToDoWhereInput;
  sharedWith_none?: ToDoWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  auth0id?: String;
  email?: String;
}>;

export interface ToDoCreateInput {
  id?: ID_Input;
  title?: String;
  description?: String;
  isDone?: Boolean;
  user: UserCreateOneWithoutTodoesInput;
  sharedWith?: UserCreateManyWithoutSharedWithInput;
}

export interface UserCreateOneWithoutTodoesInput {
  create?: UserCreateWithoutTodoesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutTodoesInput {
  id?: ID_Input;
  auth0id?: String;
  email?: String;
  name?: String;
  sharedWith?: ToDoCreateManyWithoutSharedWithInput;
}

export interface ToDoCreateManyWithoutSharedWithInput {
  create?:
    | ToDoCreateWithoutSharedWithInput[]
    | ToDoCreateWithoutSharedWithInput;
  connect?: ToDoWhereUniqueInput[] | ToDoWhereUniqueInput;
}

export interface ToDoCreateWithoutSharedWithInput {
  id?: ID_Input;
  title?: String;
  description?: String;
  isDone?: Boolean;
  user: UserCreateOneWithoutTodoesInput;
}

export interface UserCreateManyWithoutSharedWithInput {
  create?:
    | UserCreateWithoutSharedWithInput[]
    | UserCreateWithoutSharedWithInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutSharedWithInput {
  id?: ID_Input;
  auth0id?: String;
  email?: String;
  name?: String;
  todoes?: ToDoCreateManyWithoutUserInput;
}

export interface ToDoCreateManyWithoutUserInput {
  create?: ToDoCreateWithoutUserInput[] | ToDoCreateWithoutUserInput;
  connect?: ToDoWhereUniqueInput[] | ToDoWhereUniqueInput;
}

export interface ToDoCreateWithoutUserInput {
  id?: ID_Input;
  title?: String;
  description?: String;
  isDone?: Boolean;
  sharedWith?: UserCreateManyWithoutSharedWithInput;
}

export interface ToDoUpdateInput {
  title?: String;
  description?: String;
  isDone?: Boolean;
  user?: UserUpdateOneRequiredWithoutTodoesInput;
  sharedWith?: UserUpdateManyWithoutSharedWithInput;
}

export interface UserUpdateOneRequiredWithoutTodoesInput {
  create?: UserCreateWithoutTodoesInput;
  update?: UserUpdateWithoutTodoesDataInput;
  upsert?: UserUpsertWithoutTodoesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutTodoesDataInput {
  auth0id?: String;
  email?: String;
  name?: String;
  sharedWith?: ToDoUpdateManyWithoutSharedWithInput;
}

export interface ToDoUpdateManyWithoutSharedWithInput {
  create?:
    | ToDoCreateWithoutSharedWithInput[]
    | ToDoCreateWithoutSharedWithInput;
  delete?: ToDoWhereUniqueInput[] | ToDoWhereUniqueInput;
  connect?: ToDoWhereUniqueInput[] | ToDoWhereUniqueInput;
  set?: ToDoWhereUniqueInput[] | ToDoWhereUniqueInput;
  disconnect?: ToDoWhereUniqueInput[] | ToDoWhereUniqueInput;
  update?:
    | ToDoUpdateWithWhereUniqueWithoutSharedWithInput[]
    | ToDoUpdateWithWhereUniqueWithoutSharedWithInput;
  upsert?:
    | ToDoUpsertWithWhereUniqueWithoutSharedWithInput[]
    | ToDoUpsertWithWhereUniqueWithoutSharedWithInput;
  deleteMany?: ToDoScalarWhereInput[] | ToDoScalarWhereInput;
  updateMany?:
    | ToDoUpdateManyWithWhereNestedInput[]
    | ToDoUpdateManyWithWhereNestedInput;
}

export interface ToDoUpdateWithWhereUniqueWithoutSharedWithInput {
  where: ToDoWhereUniqueInput;
  data: ToDoUpdateWithoutSharedWithDataInput;
}

export interface ToDoUpdateWithoutSharedWithDataInput {
  title?: String;
  description?: String;
  isDone?: Boolean;
  user?: UserUpdateOneRequiredWithoutTodoesInput;
}

export interface ToDoUpsertWithWhereUniqueWithoutSharedWithInput {
  where: ToDoWhereUniqueInput;
  update: ToDoUpdateWithoutSharedWithDataInput;
  create: ToDoCreateWithoutSharedWithInput;
}

export interface ToDoScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  isDone?: Boolean;
  isDone_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ToDoScalarWhereInput[] | ToDoScalarWhereInput;
  OR?: ToDoScalarWhereInput[] | ToDoScalarWhereInput;
  NOT?: ToDoScalarWhereInput[] | ToDoScalarWhereInput;
}

export interface ToDoUpdateManyWithWhereNestedInput {
  where: ToDoScalarWhereInput;
  data: ToDoUpdateManyDataInput;
}

export interface ToDoUpdateManyDataInput {
  title?: String;
  description?: String;
  isDone?: Boolean;
}

export interface UserUpsertWithoutTodoesInput {
  update: UserUpdateWithoutTodoesDataInput;
  create: UserCreateWithoutTodoesInput;
}

export interface UserUpdateManyWithoutSharedWithInput {
  create?:
    | UserCreateWithoutSharedWithInput[]
    | UserCreateWithoutSharedWithInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutSharedWithInput[]
    | UserUpdateWithWhereUniqueWithoutSharedWithInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutSharedWithInput[]
    | UserUpsertWithWhereUniqueWithoutSharedWithInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutSharedWithInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSharedWithDataInput;
}

export interface UserUpdateWithoutSharedWithDataInput {
  auth0id?: String;
  email?: String;
  name?: String;
  todoes?: ToDoUpdateManyWithoutUserInput;
}

export interface ToDoUpdateManyWithoutUserInput {
  create?: ToDoCreateWithoutUserInput[] | ToDoCreateWithoutUserInput;
  delete?: ToDoWhereUniqueInput[] | ToDoWhereUniqueInput;
  connect?: ToDoWhereUniqueInput[] | ToDoWhereUniqueInput;
  set?: ToDoWhereUniqueInput[] | ToDoWhereUniqueInput;
  disconnect?: ToDoWhereUniqueInput[] | ToDoWhereUniqueInput;
  update?:
    | ToDoUpdateWithWhereUniqueWithoutUserInput[]
    | ToDoUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ToDoUpsertWithWhereUniqueWithoutUserInput[]
    | ToDoUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: ToDoScalarWhereInput[] | ToDoScalarWhereInput;
  updateMany?:
    | ToDoUpdateManyWithWhereNestedInput[]
    | ToDoUpdateManyWithWhereNestedInput;
}

export interface ToDoUpdateWithWhereUniqueWithoutUserInput {
  where: ToDoWhereUniqueInput;
  data: ToDoUpdateWithoutUserDataInput;
}

export interface ToDoUpdateWithoutUserDataInput {
  title?: String;
  description?: String;
  isDone?: Boolean;
  sharedWith?: UserUpdateManyWithoutSharedWithInput;
}

export interface ToDoUpsertWithWhereUniqueWithoutUserInput {
  where: ToDoWhereUniqueInput;
  update: ToDoUpdateWithoutUserDataInput;
  create: ToDoCreateWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutSharedWithInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSharedWithDataInput;
  create: UserCreateWithoutSharedWithInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  auth0id?: String;
  auth0id_not?: String;
  auth0id_in?: String[] | String;
  auth0id_not_in?: String[] | String;
  auth0id_lt?: String;
  auth0id_lte?: String;
  auth0id_gt?: String;
  auth0id_gte?: String;
  auth0id_contains?: String;
  auth0id_not_contains?: String;
  auth0id_starts_with?: String;
  auth0id_not_starts_with?: String;
  auth0id_ends_with?: String;
  auth0id_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  auth0id?: String;
  email?: String;
  name?: String;
}

export interface ToDoUpdateManyMutationInput {
  title?: String;
  description?: String;
  isDone?: Boolean;
}

export interface UserCreateInput {
  id?: ID_Input;
  auth0id?: String;
  email?: String;
  name?: String;
  todoes?: ToDoCreateManyWithoutUserInput;
  sharedWith?: ToDoCreateManyWithoutSharedWithInput;
}

export interface UserUpdateInput {
  auth0id?: String;
  email?: String;
  name?: String;
  todoes?: ToDoUpdateManyWithoutUserInput;
  sharedWith?: ToDoUpdateManyWithoutSharedWithInput;
}

export interface UserUpdateManyMutationInput {
  auth0id?: String;
  email?: String;
  name?: String;
}

export interface ToDoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ToDoWhereInput;
  AND?: ToDoSubscriptionWhereInput[] | ToDoSubscriptionWhereInput;
  OR?: ToDoSubscriptionWhereInput[] | ToDoSubscriptionWhereInput;
  NOT?: ToDoSubscriptionWhereInput[] | ToDoSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ToDo {
  id: ID_Output;
  title?: String;
  description?: String;
  isDone: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ToDoPromise extends Promise<ToDo>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  isDone: () => Promise<Boolean>;
  user: <T = UserPromise>() => T;
  sharedWith: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ToDoSubscription
  extends Promise<AsyncIterator<ToDo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  isDone: () => Promise<AsyncIterator<Boolean>>;
  user: <T = UserSubscription>() => T;
  sharedWith: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  auth0id?: String;
  email?: String;
  name?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  auth0id: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  todoes: <T = FragmentableArray<ToDo>>(
    args?: {
      where?: ToDoWhereInput;
      orderBy?: ToDoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sharedWith: <T = FragmentableArray<ToDo>>(
    args?: {
      where?: ToDoWhereInput;
      orderBy?: ToDoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  auth0id: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  todoes: <T = Promise<AsyncIterator<ToDoSubscription>>>(
    args?: {
      where?: ToDoWhereInput;
      orderBy?: ToDoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sharedWith: <T = Promise<AsyncIterator<ToDoSubscription>>>(
    args?: {
      where?: ToDoWhereInput;
      orderBy?: ToDoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ToDoConnection {
  pageInfo: PageInfo;
  edges: ToDoEdge[];
}

export interface ToDoConnectionPromise
  extends Promise<ToDoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ToDoEdge>>() => T;
  aggregate: <T = AggregateToDoPromise>() => T;
}

export interface ToDoConnectionSubscription
  extends Promise<AsyncIterator<ToDoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ToDoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateToDoSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ToDoEdge {
  node: ToDo;
  cursor: String;
}

export interface ToDoEdgePromise extends Promise<ToDoEdge>, Fragmentable {
  node: <T = ToDoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ToDoEdgeSubscription
  extends Promise<AsyncIterator<ToDoEdge>>,
    Fragmentable {
  node: <T = ToDoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateToDo {
  count: Int;
}

export interface AggregateToDoPromise
  extends Promise<AggregateToDo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateToDoSubscription
  extends Promise<AsyncIterator<AggregateToDo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ToDoSubscriptionPayload {
  mutation: MutationType;
  node: ToDo;
  updatedFields: String[];
  previousValues: ToDoPreviousValues;
}

export interface ToDoSubscriptionPayloadPromise
  extends Promise<ToDoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ToDoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ToDoPreviousValuesPromise>() => T;
}

export interface ToDoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ToDoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ToDoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ToDoPreviousValuesSubscription>() => T;
}

export interface ToDoPreviousValues {
  id: ID_Output;
  title?: String;
  description?: String;
  isDone: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ToDoPreviousValuesPromise
  extends Promise<ToDoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  isDone: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ToDoPreviousValuesSubscription
  extends Promise<AsyncIterator<ToDoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  isDone: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  auth0id?: String;
  email?: String;
  name?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  auth0id: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  auth0id: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "ToDo",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
