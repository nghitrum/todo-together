module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.30.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateToDo {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createToDo(data: ToDoCreateInput!): ToDo!
  updateToDo(data: ToDoUpdateInput!, where: ToDoWhereUniqueInput!): ToDo
  updateManyToDoes(data: ToDoUpdateManyMutationInput!, where: ToDoWhereInput): BatchPayload!
  upsertToDo(where: ToDoWhereUniqueInput!, create: ToDoCreateInput!, update: ToDoUpdateInput!): ToDo!
  deleteToDo(where: ToDoWhereUniqueInput!): ToDo
  deleteManyToDoes(where: ToDoWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  toDo(where: ToDoWhereUniqueInput!): ToDo
  toDoes(where: ToDoWhereInput, orderBy: ToDoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToDo]!
  toDoesConnection(where: ToDoWhereInput, orderBy: ToDoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ToDoConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  toDo(where: ToDoSubscriptionWhereInput): ToDoSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type ToDo {
  id: ID!
  title: String
  description: String
  isDone: Boolean!
  user: User!
  sharedWith(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ToDoConnection {
  pageInfo: PageInfo!
  edges: [ToDoEdge]!
  aggregate: AggregateToDo!
}

input ToDoCreateInput {
  id: ID
  title: String
  description: String
  isDone: Boolean
  user: UserCreateOneWithoutTodoesInput!
  sharedWith: UserCreateManyWithoutSharedWithInput
}

input ToDoCreateManyWithoutSharedWithInput {
  create: [ToDoCreateWithoutSharedWithInput!]
  connect: [ToDoWhereUniqueInput!]
}

input ToDoCreateManyWithoutUserInput {
  create: [ToDoCreateWithoutUserInput!]
  connect: [ToDoWhereUniqueInput!]
}

input ToDoCreateWithoutSharedWithInput {
  id: ID
  title: String
  description: String
  isDone: Boolean
  user: UserCreateOneWithoutTodoesInput!
}

input ToDoCreateWithoutUserInput {
  id: ID
  title: String
  description: String
  isDone: Boolean
  sharedWith: UserCreateManyWithoutSharedWithInput
}

type ToDoEdge {
  node: ToDo!
  cursor: String!
}

enum ToDoOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  isDone_ASC
  isDone_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ToDoPreviousValues {
  id: ID!
  title: String
  description: String
  isDone: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ToDoScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  isDone: Boolean
  isDone_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ToDoScalarWhereInput!]
  OR: [ToDoScalarWhereInput!]
  NOT: [ToDoScalarWhereInput!]
}

type ToDoSubscriptionPayload {
  mutation: MutationType!
  node: ToDo
  updatedFields: [String!]
  previousValues: ToDoPreviousValues
}

input ToDoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ToDoWhereInput
  AND: [ToDoSubscriptionWhereInput!]
  OR: [ToDoSubscriptionWhereInput!]
  NOT: [ToDoSubscriptionWhereInput!]
}

input ToDoUpdateInput {
  title: String
  description: String
  isDone: Boolean
  user: UserUpdateOneRequiredWithoutTodoesInput
  sharedWith: UserUpdateManyWithoutSharedWithInput
}

input ToDoUpdateManyDataInput {
  title: String
  description: String
  isDone: Boolean
}

input ToDoUpdateManyMutationInput {
  title: String
  description: String
  isDone: Boolean
}

input ToDoUpdateManyWithoutSharedWithInput {
  create: [ToDoCreateWithoutSharedWithInput!]
  delete: [ToDoWhereUniqueInput!]
  connect: [ToDoWhereUniqueInput!]
  set: [ToDoWhereUniqueInput!]
  disconnect: [ToDoWhereUniqueInput!]
  update: [ToDoUpdateWithWhereUniqueWithoutSharedWithInput!]
  upsert: [ToDoUpsertWithWhereUniqueWithoutSharedWithInput!]
  deleteMany: [ToDoScalarWhereInput!]
  updateMany: [ToDoUpdateManyWithWhereNestedInput!]
}

input ToDoUpdateManyWithoutUserInput {
  create: [ToDoCreateWithoutUserInput!]
  delete: [ToDoWhereUniqueInput!]
  connect: [ToDoWhereUniqueInput!]
  set: [ToDoWhereUniqueInput!]
  disconnect: [ToDoWhereUniqueInput!]
  update: [ToDoUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ToDoUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ToDoScalarWhereInput!]
  updateMany: [ToDoUpdateManyWithWhereNestedInput!]
}

input ToDoUpdateManyWithWhereNestedInput {
  where: ToDoScalarWhereInput!
  data: ToDoUpdateManyDataInput!
}

input ToDoUpdateWithoutSharedWithDataInput {
  title: String
  description: String
  isDone: Boolean
  user: UserUpdateOneRequiredWithoutTodoesInput
}

input ToDoUpdateWithoutUserDataInput {
  title: String
  description: String
  isDone: Boolean
  sharedWith: UserUpdateManyWithoutSharedWithInput
}

input ToDoUpdateWithWhereUniqueWithoutSharedWithInput {
  where: ToDoWhereUniqueInput!
  data: ToDoUpdateWithoutSharedWithDataInput!
}

input ToDoUpdateWithWhereUniqueWithoutUserInput {
  where: ToDoWhereUniqueInput!
  data: ToDoUpdateWithoutUserDataInput!
}

input ToDoUpsertWithWhereUniqueWithoutSharedWithInput {
  where: ToDoWhereUniqueInput!
  update: ToDoUpdateWithoutSharedWithDataInput!
  create: ToDoCreateWithoutSharedWithInput!
}

input ToDoUpsertWithWhereUniqueWithoutUserInput {
  where: ToDoWhereUniqueInput!
  update: ToDoUpdateWithoutUserDataInput!
  create: ToDoCreateWithoutUserInput!
}

input ToDoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  isDone: Boolean
  isDone_not: Boolean
  user: UserWhereInput
  sharedWith_every: UserWhereInput
  sharedWith_some: UserWhereInput
  sharedWith_none: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ToDoWhereInput!]
  OR: [ToDoWhereInput!]
  NOT: [ToDoWhereInput!]
}

input ToDoWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  auth0id: String
  email: String
  name: String
  todoes(where: ToDoWhereInput, orderBy: ToDoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToDo!]
  sharedWith(where: ToDoWhereInput, orderBy: ToDoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToDo!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  auth0id: String
  email: String
  name: String
  todoes: ToDoCreateManyWithoutUserInput
  sharedWith: ToDoCreateManyWithoutSharedWithInput
}

input UserCreateManyWithoutSharedWithInput {
  create: [UserCreateWithoutSharedWithInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutTodoesInput {
  create: UserCreateWithoutTodoesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutSharedWithInput {
  id: ID
  auth0id: String
  email: String
  name: String
  todoes: ToDoCreateManyWithoutUserInput
}

input UserCreateWithoutTodoesInput {
  id: ID
  auth0id: String
  email: String
  name: String
  sharedWith: ToDoCreateManyWithoutSharedWithInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  auth0id_ASC
  auth0id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  auth0id: String
  email: String
  name: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  auth0id: String
  auth0id_not: String
  auth0id_in: [String!]
  auth0id_not_in: [String!]
  auth0id_lt: String
  auth0id_lte: String
  auth0id_gt: String
  auth0id_gte: String
  auth0id_contains: String
  auth0id_not_contains: String
  auth0id_starts_with: String
  auth0id_not_starts_with: String
  auth0id_ends_with: String
  auth0id_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  auth0id: String
  email: String
  name: String
  todoes: ToDoUpdateManyWithoutUserInput
  sharedWith: ToDoUpdateManyWithoutSharedWithInput
}

input UserUpdateManyDataInput {
  auth0id: String
  email: String
  name: String
}

input UserUpdateManyMutationInput {
  auth0id: String
  email: String
  name: String
}

input UserUpdateManyWithoutSharedWithInput {
  create: [UserCreateWithoutSharedWithInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSharedWithInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSharedWithInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutTodoesInput {
  create: UserCreateWithoutTodoesInput
  update: UserUpdateWithoutTodoesDataInput
  upsert: UserUpsertWithoutTodoesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutSharedWithDataInput {
  auth0id: String
  email: String
  name: String
  todoes: ToDoUpdateManyWithoutUserInput
}

input UserUpdateWithoutTodoesDataInput {
  auth0id: String
  email: String
  name: String
  sharedWith: ToDoUpdateManyWithoutSharedWithInput
}

input UserUpdateWithWhereUniqueWithoutSharedWithInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSharedWithDataInput!
}

input UserUpsertWithoutTodoesInput {
  update: UserUpdateWithoutTodoesDataInput!
  create: UserCreateWithoutTodoesInput!
}

input UserUpsertWithWhereUniqueWithoutSharedWithInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSharedWithDataInput!
  create: UserCreateWithoutSharedWithInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  auth0id: String
  auth0id_not: String
  auth0id_in: [String!]
  auth0id_not_in: [String!]
  auth0id_lt: String
  auth0id_lte: String
  auth0id_gt: String
  auth0id_gte: String
  auth0id_contains: String
  auth0id_not_contains: String
  auth0id_starts_with: String
  auth0id_not_starts_with: String
  auth0id_ends_with: String
  auth0id_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  todoes_every: ToDoWhereInput
  todoes_some: ToDoWhereInput
  todoes_none: ToDoWhereInput
  sharedWith_every: ToDoWhereInput
  sharedWith_some: ToDoWhereInput
  sharedWith_none: ToDoWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  auth0id: String
  email: String
}
`
      }
    